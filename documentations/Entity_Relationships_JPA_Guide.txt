# MOTOSNAP Entity Relationships & JPA Annotations Guide

## Entity Relationships & Foreign Keys

```
users (1) ←→ (M) vehicles         // user_id FK
users (1) ←→ (M) orders           // user_id FK  
users (1) ←→ (M) bookings         // user_id FK

vehicles (1) ←→ (M) bookings      // vehicle_id FK

orders (1) ←→ (M) order_items     // order_id FK
orders (1) ←→ (1) receipts        // order_id FK

inventory (1) ←→ (M) order_items  // part_id FK
inventory (1) ←→ (M) requests     // part_id FK

services (1) ←→ (M) pricing_rules // service_id FK
services (1) ←→ (M) bookings      // service_id FK

bookings (1) ←→ (M) requests      // booking_id FK
bookings (1) ←→ (1) invoices      // booking_id FK

users (1) ←→ (M) requests         // mechanic_id FK (User with MECHANIC role)
users (1) ←→ (M) receipts         // approved_by FK (User with ADMIN role)
```

## JPA Entity Examples

### User Entity:
```java
@Entity 
@Table(name = "users")
public class User {
    @Id 
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(nullable = false, unique = true)
    private String email;
    
    @Column(nullable = false)
    private String password;
    
    @Column(nullable = false)
    private String name;
    
    private String phone;
    
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private Role role;
    
    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<Vehicle> vehicles = new ArrayList<>();
    
    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<Order> orders = new ArrayList<>();
    
    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, fetch = FetchType.LAZY)  
    private List<Booking> bookings = new ArrayList<>();
    
    // Constructors, getters, setters
}
```

### Vehicle Entity:
```java
@Entity 
@Table(name = "vehicles")
public class Vehicle {
    @Id 
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(nullable = false)
    private String plateNo;
    
    @Column(nullable = false)
    private String model;
    
    private Integer year;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    private User user;
    
    @OneToMany(mappedBy = "vehicle", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<Booking> bookings = new ArrayList<>();
    
    // Constructors, getters, setters
}
```

### Booking Entity:
```java
@Entity 
@Table(name = "bookings") 
public class Booking {
    @Id 
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(nullable = false)
    private LocalDateTime datetime;
    
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private BookingStatus status;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    private User user;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "vehicle_id", nullable = false)
    private Vehicle vehicle;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "service_id", nullable = false)
    private Service service;
    
    @OneToMany(mappedBy = "booking", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<Request> requests = new ArrayList<>();
    
    @OneToOne(mappedBy = "booking", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private Invoice invoice;
    
    // Constructors, getters, setters
}
```

### Order Entity:
```java
@Entity 
@Table(name = "orders")
public class Order {
    @Id 
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private OrderStatus status;
    
    @CreationTimestamp
    private LocalDateTime createdAt;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    private User user;
    
    @OneToMany(mappedBy = "order", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<OrderItem> orderItems = new ArrayList<>();
    
    @OneToOne(mappedBy = "order", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private Receipt receipt;
    
    // Constructors, getters, setters
}
```

### OrderItem Entity:
```java
@Entity 
@Table(name = "order_items")
public class OrderItem {
    @Id 
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(nullable = false)
    private Integer qty;
    
    @Column(nullable = false)
    private BigDecimal price;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "order_id", nullable = false)
    private Order order;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "part_id", nullable = false)
    private Inventory part;
    
    // Constructors, getters, setters
}
```

### Inventory Entity:
```java
@Entity 
@Table(name = "inventory")
public class Inventory {
    @Id 
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(nullable = false)
    private String partName;
    
    @Column(nullable = false)
    private Integer qty;
    
    @Column(nullable = false)
    private BigDecimal unitPrice;
    
    @OneToMany(mappedBy = "part", fetch = FetchType.LAZY)
    private List<OrderItem> orderItems = new ArrayList<>();
    
    @OneToMany(mappedBy = "part", fetch = FetchType.LAZY)
    private List<Request> requests = new ArrayList<>();
    
    // Constructors, getters, setters
}
```

### Service Entity:
```java
@Entity 
@Table(name = "services")
public class Service {
    @Id 
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(nullable = false)
    private String name;
    
    @Column(nullable = false)
    private String category;
    
    @Column(nullable = false)
    private BigDecimal basePrice;
    
    @OneToMany(mappedBy = "service", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<PricingRule> pricingRules = new ArrayList<>();
    
    @OneToMany(mappedBy = "service", fetch = FetchType.LAZY)
    private List<Booking> bookings = new ArrayList<>();
    
    // Constructors, getters, setters
}
```

### Request Entity:
```java
@Entity 
@Table(name = "requests")
public class Request {
    @Id 
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(nullable = false)
    private Integer qty;
    
    @CreationTimestamp
    private LocalDateTime requestedAt;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "mechanic_id", nullable = false)
    private User mechanic; // User with MECHANIC role
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "part_id", nullable = false)
    private Inventory part;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "booking_id", nullable = false)
    private Booking booking;
    
    // Constructors, getters, setters
}
```

### Receipt Entity:
```java
@Entity 
@Table(name = "receipts")
public class Receipt {
    @Id 
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(nullable = false)
    private String fileUrl;
    
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private ReceiptStatus status;
    
    @CreationTimestamp
    private LocalDateTime uploadedAt;
    
    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "order_id", nullable = false)
    private Order order;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "approved_by")
    private User approvedBy; // User with ADMIN role
    
    // Constructors, getters, setters
}
```

### Invoice Entity:
```java
@Entity 
@Table(name = "invoices")
public class Invoice {
    @Id 
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(nullable = false)
    private BigDecimal total;
    
    private String pdfUrl;
    
    @CreationTimestamp
    private LocalDateTime generatedAt;
    
    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "booking_id", nullable = false)
    private Booking booking;
    
    // Constructors, getters, setters
}
```

### PricingRule Entity:
```java
@Entity 
@Table(name = "pricing_rules")
public class PricingRule {
    @Id 
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(nullable = false)
    private String vehicleCategory;
    
    @Column(nullable = false)
    private BigDecimal price;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "service_id", nullable = false)
    private Service service;
    
    // Constructors, getters, setters
}
```

## Enums

```java
public enum Role {
    ADMIN, MECHANIC, CUSTOMER
}

public enum BookingStatus {
    PENDING, IN_PROGRESS, COMPLETED, CANCELLED
}

public enum OrderStatus {
    PENDING, APPROVED, REJECTED, COMPLETED
}

public enum ReceiptStatus {
    PENDING, APPROVED, REJECTED
}
```

## Key JPA Annotation Notes:

- **@ManyToOne**: Use `fetch = FetchType.LAZY` for performance
- **@OneToMany**: Always use `mappedBy` and `fetch = FetchType.LAZY`
- **@OneToOne**: Use `mappedBy` on the non-owning side
- **@JoinColumn**: Specify `nullable = false` where appropriate
- **@Column**: Add constraints like `unique = true`, `nullable = false`
- **@Enumerated(EnumType.STRING)**: Store enum values as strings in DB
- **@CreationTimestamp**: Auto-populate creation timestamps