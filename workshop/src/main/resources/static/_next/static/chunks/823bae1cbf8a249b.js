(globalThis.TURBOPACK||(globalThis.TURBOPACK=[])).push(["object"==typeof document?document.currentScript:void 0,57951,9165,e=>{"use strict";e.s(["AuthProvider",()=>i,"useAuth",()=>h],57951);var t=e.i(43476),s=e.i(71645);function r(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}e.s(["apiClient",()=>n,"default",()=>a],9165);let o=e.i(47167).default.env.NEXT_PUBLIC_API_URL||"http://localhost:8080/api",n=new class{async request(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},s="".concat(this.baseURL).concat(e),r={headers:{"Content-Type":"application/json",...t.headers},...t};this.accessToken&&!e.includes("/auth/")&&(r.headers={...r.headers,Authorization:"Bearer ".concat(this.accessToken)});try{let t=await fetch(s,r);if(401===t.status&&this.refreshTokenValue&&!e.includes("/auth/refresh")){if(await this.refreshAccessToken()){r.headers={...r.headers,Authorization:"Bearer ".concat(this.accessToken)};let e=await fetch(s,r);if(!e.ok)throw await this.handleError(e);return e.json()}throw this.clearTokens(),window.location.href="/login",Error("Session expired")}if(!t.ok)throw await this.handleError(t);return t.json()}catch(e){throw console.error("API Error:",e),e}}async handleError(e){try{return await e.json()}catch(t){return{error:"HTTP ".concat(e.status,": ").concat(e.statusText)}}}async refreshAccessToken(){var e,t,s,r;if(!this.refreshTokenValue)return!1;console.log("DEBUG: Attempting token refresh"),console.log("DEBUG: Access token:",(null==(e=this.accessToken)?void 0:e.substring(0,50))+"..."),console.log("DEBUG: Refresh token:",(null==(t=this.refreshTokenValue)?void 0:t.substring(0,50))+"..."),console.log("DEBUG: Tokens are same?",this.accessToken===this.refreshTokenValue);try{let e=await fetch("".concat(this.baseURL,"/auth/refresh"),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.refreshTokenValue)}});if(console.log("DEBUG: Refresh response status:",e.status),e.ok){let t=await e.json();return console.log("DEBUG: Got new tokens, access:",(null==(s=t.accessToken)?void 0:s.substring(0,50))+"..."),console.log("DEBUG: Got new tokens, refresh:",(null==(r=t.refreshToken)?void 0:r.substring(0,50))+"..."),this.setTokens(t.accessToken,t.refreshToken),!0}{let t=await e.json();console.error("Token refresh failed:",t)}}catch(e){console.error("Token refresh failed:",e)}return!1}setTokens(e,t){console.log("DEBUG: Setting tokens"),console.log("DEBUG: Setting access token:",(null==e?void 0:e.substring(0,50))+"..."),console.log("DEBUG: Setting refresh token:",(null==t?void 0:t.substring(0,50))+"..."),console.log("DEBUG: Tokens are same?",e===t),this.accessToken=e,this.refreshTokenValue=t,localStorage.setItem("accessToken",e),localStorage.setItem("refreshToken",t)}clearTokens(){this.accessToken=null,this.refreshTokenValue=null,localStorage.removeItem("accessToken"),localStorage.removeItem("refreshToken")}async register(e){let t=await this.request("/auth/register",{method:"POST",body:JSON.stringify(e)});return t.accessToken&&this.setTokens(t.accessToken,t.refreshToken),t}async login(e){let t=await this.request("/auth/login",{method:"POST",body:JSON.stringify(e)});return t.accessToken&&this.setTokens(t.accessToken,t.refreshToken),t}async refreshToken(){if(!this.refreshTokenValue)throw Error("No refresh token available");try{let e=await fetch("".concat(this.baseURL,"/auth/refresh"),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.refreshTokenValue)}});if(!e.ok)throw await this.handleError(e);let t=await e.json();return t.accessToken&&this.setTokens(t.accessToken,t.refreshToken),t}catch(e){throw console.error("Token refresh failed:",e),e}}logout(){this.clearTokens()}isAuthenticated(){return!!this.accessToken}getAccessToken(){return this.accessToken}async getInventory(){return this.request("/inventory")}async getInventoryItem(e){return this.request("/inventory/".concat(e))}async createInventoryItem(e){return this.request("/inventory",{method:"POST",body:JSON.stringify(e)})}async updateInventoryItem(e,t){return this.request("/inventory/".concat(e),{method:"PUT",body:JSON.stringify(t)})}async deleteInventoryItem(e){await this.request("/inventory/".concat(e),{method:"DELETE"})}async updateStock(e,t){return this.request("/inventory/".concat(e,"/stock"),{method:"PUT",body:JSON.stringify({quantity:t})})}async searchInventory(e){return this.request("/inventory?search=".concat(encodeURIComponent(e)))}async getLowStockItems(){return this.request("/inventory?lowStock=true")}async getServices(){return this.request("/services")}async getService(e){return this.request("/services/".concat(e))}async createService(e){return this.request("/services",{method:"POST",body:JSON.stringify(e)})}async updateService(e,t){return this.request("/services/".concat(e),{method:"PUT",body:JSON.stringify(t)})}async deleteService(e){await this.request("/services/".concat(e),{method:"DELETE"})}async getServiceCategories(){return this.request("/services/categories")}async searchServices(e){return this.request("/services?search=".concat(encodeURIComponent(e)))}async getUsers(){return this.request("/users")}async getUser(e){return this.request("/users/".concat(e))}async updateUserRole(e,t){return this.request("/users/".concat(e,"/role"),{method:"PUT",body:JSON.stringify(t)})}async deleteUser(e){await this.request("/users/".concat(e),{method:"DELETE"})}async getUserStats(){return this.request("/users/stats")}async searchUsers(e){return this.request("/users?search=".concat(encodeURIComponent(e)))}constructor(e){r(this,"baseURL",void 0),r(this,"accessToken",null),r(this,"refreshTokenValue",null),this.baseURL=e,this.accessToken=localStorage.getItem("accessToken"),this.refreshTokenValue=localStorage.getItem("refreshToken")}}(o),a=n,c=(0,s.createContext)(void 0);function i(e){let{children:r}=e,[o,a]=(0,s.useState)(null),[i,h]=(0,s.useState)(!0);(0,s.useEffect)(()=>{(async()=>{try{var e;if(null==n||null==(e=n.isAuthenticated)?void 0:e.call(n))try{let e=await n.refreshToken();(null==e?void 0:e.user)&&a(e.user)}catch(e){console.error("Token refresh failed:",e),n.clearTokens()}}catch(e){console.error("Auth initialization failed:",e)}finally{h(!1)}})()},[]);let l=async e=>{try{h(!0);let t=await n.login(e);a(t.user)}catch(e){throw e}finally{h(!1)}},u=async e=>{try{h(!0);let t=await n.register(e);a(t.user)}catch(e){throw e}finally{h(!1)}},T=!!o&&n.isAuthenticated();return(0,t.jsx)(c.Provider,{value:{user:o,loading:i,login:l,register:u,logout:()=>{n.logout(),a(null)},isAuthenticated:T},children:r})}function h(){let e=(0,s.useContext)(c);if(void 0===e)throw Error("useAuth must be used within an AuthProvider");return e}}]);