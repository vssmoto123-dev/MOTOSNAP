MOTOSNAP Development Checklist

---

### Milestone 1: The Foundation (Data Models & Security)

[x] **Database:** Configure `application.properties` for MySQL connection.

**JPA Entities:**
[x] Create `User` entity.
[x] Create `Vehicle` entity.
[x] Create `Inventory` entity (for parts).
[x] Create `Service` entity.
[x] Create `Cart` entity.
[x] Create `CartItem` entity.
[x] Create `Order` entity.
[x] Create `Receipt` entity.

**JPA Repositories:**
[x] Create `UserRepository`.
[x] Create `VehicleRepository`.
[x] Create `InventoryRepository`.
[x] Create `ServiceRepository`.
[x] Create `CartRepository`.
[x] Create `CartItemRepository`.
[x] Create `OrderRepository`.
[x] Create `ReceiptRepository`.

**Authentication & Security:**
[x] **Spring Security:** Complete the initial configuration.
[x] **User Details:** Implement the `UserDetailsService` interface.
[x] **Registration:** Create the `POST /api/auth/register` endpoint.
[x] **Login:** Create the `POST /api/auth/login` endpoint.
[x] **JWT:** Ensure the login endpoint generates and returns a valid JWT.
[x] **Authorization:** Configure method-level security.

---

### Milestone 2: Core Admin & System Management

*(This milestone remains focused on managing core system data)*

**Inventory Management API (`InventoryController`):**
[x] Create the `InventoryController` class, secured for ADMIN role.
[x] `POST /api/inventory` - Create a new part.
[x] `GET /api/inventory` - Get a list of all parts.
[x] `GET /api/inventory/{id}` - Get a single part by its ID.
[x] `PUT /api/inventory/{id}` - Update an existing part.
[x] `DELETE /api/inventory/{id}` - Delete a part.

**Service Management API (`ServiceController`):**
[x] Create the `ServiceController` class, secured for ADMIN role.
[x] `POST /api/services` - Create a new service type.
[x] `GET /api/services` - Get a list of all services.
[x] `PUT /api/services/{id}` - Update an existing service.
[x] `DELETE /api/services/{id}` - Delete a service.

**User Management API (`UserController`):**
[x] Create the `UserController` class, secured for ADMIN role.
[x] `GET /api/users` - Get a list of all users (using a DTO).
[x] `PUT /api/users/{id}/role` - Update a specific user's role.

---

### Milestone 3: Customer & Mechanic Features

**Public Parts & Profile API:**
[x] `GET /api/parts` - Allow public/customers to browse all available parts.
[x] `GET /api/me` - Allow an authenticated customer to view their own profile.
[x] `GET /api/me/vehicles` - Allow a customer to view their vehicles.
[x] `POST /api/me/vehicles` - Allow a customer to add a vehicle to their profile.

**Shopping Cart API:**
[x] `GET /api/cart` - Get the contents of the currently logged-in user's cart.
[x] `POST /api/cart/items` - Add an item (or update its quantity) in the cart.
[x] `PUT /api/cart/items/{itemId}` - Update quantity of an item in the cart.
[x] `DELETE /api/cart/items/{itemId}` - Remove an item from the cart.

**Customer Purchase API:**
[x] `GET /api/orders` - Get user's order history.
[x] `POST /api/orders` - Convert the user's cart into a formal `Order`.
[x] `GET /api/orders/{orderId}` - Get specific order details.
[x] `POST /api/orders/{orderId}/receipt` - Upload a payment receipt for the order.
[x] `GET /api/orders/{orderId}/receipt/{receiptId}/view` - View uploaded receipt.

**Service Booking & Parts Request:**
[x] `POST /api/bookings` - Allow a customer to book a new service appointment.
[x] `GET /api/bookings` - Allow ADMINs or MECHANICs to view all appointments.
[x] `GET /api/bookings/my` - Allow customers to view their own bookings.
[x] `PUT /api/bookings/{id}/status` - Allow admins/mechanics to update booking status.
[x] `PUT /api/bookings/{id}/assign` - Allow admins to assign mechanics to bookings.
[ ] `POST /api/bookings/{bookingId}/request-part` - Allow a mechanic to request a part for a job.
[ ] **Inventory Logic:** Ensure the parts request automatically deducts the quantity from the inventory.

---

### Milestone 4: The Service Workflow & Notifications

**Admin Order Management:**
[ ] `GET /api/admin/orders` - Allow an admin to view all pending purchase orders.
[ ] `PUT /api/admin/orders/{orderId}/status` - Allow an admin to approve or reject an order.

**Job Status & History:**
[ ] `PUT /api/bookings/{bookingId}/status` - Allow a mechanic to update a booking's status.
[ ] **Service History:** Create a `ServiceHistory` entity and repository.
[ ] **Automation:** Automatically create a `ServiceHistory` record when a booking is marked 'COMPLETED'.

**Email Notifications:**
[ ] **Configuration:** Configure `JavaMailSender`.
[ ] **New Booking:** Send a confirmation email to the customer after a successful booking.
[ ] **Order Confirmation:** Send an email when a customer's order is approved.
[ ] **Service Completion:** Send a notification email when a service is marked 'COMPLETED'.

---

### Recent Enhancements Completed (Latest Session)

**Service Booking System Implementation (Milestone 3.2 - Partial):**
[x] **Backend APIs:** Complete BookingController with all CRUD endpoints
[x] **BookingService:** Full business logic for booking lifecycle management
[x] **DTOs:** BookingRequest, BookingResponse, BookingStatusUpdateRequest
[x] **Customer Booking:** Real API integration for service booking form
[x] **Customer UI:** Complete booking status tracking page (/dashboard/bookings)
[x] **Navigation:** Added "My Bookings" link to main dashboard
[x] **Status Tracking:** Visual progress timeline for booking lifecycle
[x] **Role Security:** Proper access control for all booking endpoints
[ ] **Admin UI:** Admin booking management page for mechanic assignment
[ ] **Mechanic UI:** Mechanic dashboard for assigned bookings
[ ] **Assignment Interface:** Frontend UI for admin to assign mechanics

**Previous Session Enhancements:**
[x] **Soft Delete Implementation:** Fixed foreign key constraint issues
[x] **Frontend Payment Enhancement:** Bank QR code integration in receipt upload
[x] **Mobile Optimization:** Responsive design improvements